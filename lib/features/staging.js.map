{"version":3,"file":"staging.js","sourceRoot":"","sources":["../../src/features/staging.ts"],"names":[],"mappings":"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","sourcesContent":["\n/* @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport ModelViewerElementBase, {$needsRender, $scene, $tick} from '../model-viewer-base.js';\nimport {Constructor} from '../utilities.js';\nimport {Timer} from '../utilities/timer.js';\nimport {CameraChangeDetails} from './controls.js';\n\n// How much the model will rotate per\n// second in radians:\nconst ROTATION_SPEED = Math.PI / 32;\nconst AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION = 3000;\n\nconst $autoRotateTimer = Symbol('autoRotateTimer');\nconst $cameraChangeHandler = Symbol('cameraChangeHandler');\nconst $onCameraChange = Symbol('onCameraChange');\n\nexport {AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION};\n\nexport interface StagingInterface {\n  autoRotate: boolean;\n}\n\nexport const StagingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<StagingInterface>&T => {\n  class StagingModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'auto-rotate'})\n    autoRotate: boolean = false;\n\n    private[$autoRotateTimer]: Timer =\n        new Timer(AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION);\n    private[$cameraChangeHandler] = (event: CustomEvent<CameraChangeDetails>) =>\n        this[$onCameraChange](event);\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener(\n          'camera-change', this[$cameraChangeHandler] as EventListener);\n      this[$autoRotateTimer].stop();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener(\n          'camera-change', this[$cameraChangeHandler] as EventListener);\n      this[$autoRotateTimer].stop();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoRotate')) {\n        (this as any)[$scene].pivot.rotation.set(0, 0, 0);\n        this[$needsRender]();\n      }\n    }\n\n    [$tick](time: number, delta: number) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this.modelIsVisible) {\n        return;\n      }\n\n      this[$autoRotateTimer].tick(delta);\n\n      if (this[$autoRotateTimer].hasStopped) {\n        (this as any)[$scene].pivot.rotation.y +=\n            ROTATION_SPEED * delta * 0.001;\n        this[$needsRender]();\n      }\n    }\n\n    [$onCameraChange](_event: CustomEvent<CameraChangeDetails>) {\n      if (!this.autoRotate) {\n        return;\n      }\n\n      this[$autoRotateTimer].reset();\n    }\n\n    get turntableRotation(): number {\n      return (this as any)[$scene].pivot.rotation.y;\n    }\n  }\n\n  return StagingModelViewerElement;\n};\n"]}